type OrganizationReward
  @model (subscriptions: { level: public })
  @key(fields: ["organizationId", "id"])
  @auth(rules: [
    {allow: groups, groups: ["OrgManagers"], operations: [read, update]},
    {allow: groups, groups: ["AppAdmins", "OrgAdmins"]},
  ])
{
  organizationId: ID!
  id: ID!
  name: String! @auth(rules: [
    {allow: groups, groups: ["OrgManagers"], operations: [read]},
    {allow: groups, groups: ["AppAdmins", "OrgAdmins"]},
  ])
  description: String! @auth(rules: [
    {allow: groups, groups: ["OrgManagers"], operations: [read]},
    {allow: groups, groups: ["AppAdmins", "OrgAdmins"]},
  ])
  requiredPoints: Int! @auth(rules: [
    {allow: groups, groups: ["OrgManagers"], operations: [read]},
    {allow: groups, groups: ["AppAdmins", "OrgAdmins"]},
  ])
  isActive: Int! @auth(rules: [
    {allow: groups, groups: ["OrgManagers"], operations: [read]},
    {allow: groups, groups: ["AppAdmins", "OrgAdmins"]},
  ])
  total: Int! 

  createdAt: AWSDateTime!
  createdBy: String
  updatedAt: AWSDateTime!
  updatedBy: String
  # relationship
  # transactions: [OrganizationTransaction] @connection(keyName: "byRewardByCreatedAt", fields: ["id"])
  # organization: Organization @connection(fields:["organizationId"])
}